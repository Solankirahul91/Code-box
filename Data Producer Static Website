<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Mock IoT Data Generator</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .code-box {
      font-family: 'Fira Code', monospace;
      white-space: pre;
    }
    .checkbox-label {
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }
  </style>
</head>

<body class="bg-gray-100 text-gray-900 dark:bg-gray-900 dark:text-gray-100">
  <div class="flex items-center justify-between p-4 border-b dark:border-gray-700">
    <h1 class="text-xl font-bold">Mock IoT Data Generator</h1>
    <label class="flex items-center gap-2">
      <input type="checkbox" id="darkModeToggle" />
      <span>üåô Dark Mode</span>
    </label>
  </div>

  <div class="p-2 grid grid-cols-1 lg:grid-cols-2 gap-3">
    <div class="bg-gray-200 dark:bg-gray-800 p-4 rounded-xl shadow space-y-1">

      <label class="block">
        <span class="text-sm font-semibold">Device ID:</span>
        <input id="deviceId" type="text" class="w-full p-2 rounded bg-white text-black" />
        <label class="checkbox-label mt-1">
          <input type="checkbox" id="autoDeviceId" checked /> Auto
        </label>
      </label>

      <label class="block">
        <span class="text-sm font-semibold">Humidity (%):</span>
        <input id="humidity" type="number" class="w-full p-2 rounded bg-white text-black" />
        <label class="checkbox-label mt-1">
          <input type="checkbox" id="autoHumidity" checked /> Auto-generate
        </label>
      </label>

      <label class="block">
        <span class="text-sm font-semibold">Location:</span>
        <select id="location" class="w-full p-2 rounded bg-white text-black"></select>
        <label class="checkbox-label mt-1">
          <input type="checkbox" id="autoLocation" checked /> Randomize
        </label>
      </label>

      <label class="block">
        <span class="text-sm font-semibold">Pressure (hPa):</span>
        <input id="pressure" type="number" class="w-full p-2 rounded bg-white text-black" />
        <label class="checkbox-label mt-1">
          <input type="checkbox" id="autoPressure" checked /> Auto-generate
        </label>
      </label>

      <label class="block">
        <span class="text-sm font-semibold">Temperature (¬∞C):</span>
        <input id="temperature" type="number" class="w-full p-2 rounded bg-white text-black" />
        <label class="checkbox-label mt-1">
          <input type="checkbox" id="autoTemperature" checked /> Auto-generate
        </label>
      </label>

      <div class="flex items-center gap-2">
        <input id="numEntries" type="number" min="1" max="100" value="1" class="w-20 p-2 rounded bg-white text-black" />
        <label class="checkbox-label">
          <input type="checkbox" id="autoMultiple" /> Auto-generate multiple entries
        </label>
      </div>

      <button id="generateBtn" class="w-full p-3 bg-indigo-600 hover:bg-indigo-700 text-white font-semibold rounded">
        Generate JSON File
      </button>

      <button id="downloadBtn" disabled class="w-full p-3 bg-green-600 hover:bg-green-700 text-white font-semibold rounded">
     ‚¨áÔ∏è Download JSON
      </button>

      <button id="uploadBtn" disabled class="w-full p-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded">
        ‚¨ÜÔ∏è Upload to API
      </button>

      <div class="space-y-2 mt-4">
        <label class="block">
          <span class="text-sm font-semibold">Upload Frequency:</span>
          <select id="uploadFrequency" class="w-full p-2 rounded bg-white text-black">
            <option value="1000">1 per second</option>
            <option value="300">3 per second</option>
            <option value="200">5 per second</option>
            <option value="100">10 per second</option>
            <option value="20">50 per second</option>
            <option value="60000">1 per minute</option>
            <option value="6000">10 per minute</option>
            <option value="2000">30 per minute</option>
            <option value="600">100 per minute</option>
            <option value="300">200 per minute</option>
          </select>
        </label>

        <label class="block">
          <span class="text-sm font-semibold">Auto-stop after:</span>
          <select id="duration" class="w-full p-2 rounded bg-white text-black">
            <option value="0">No limit</option>
            <option value="5">5 minutes</option>
            <option value="15">15 minutes</option>
            <option value="30">30 minutes</option>
            <option value="60">1 hour</option>
            <option value="180">3 hours</option>
            <option value="300">5 hours</option>
          </select>
        </label>

        <div id="remainingTimeDisplay" class="text-sm font-semibold text-gray-700 dark:text-gray-300"></div>

        <div class="flex gap-2">
          <button id="startAutoUploadBtn" class="flex-1 p-2 bg-blue-600 hover:bg-blue-700 text-white rounded">
            ‚ñ∂Ô∏è Start Auto Upload
          </button>
          <button id="stopAutoUploadBtn" class="flex-1 p-2 bg-red-600 hover:bg-red-700 text-white rounded" disabled>
            ‚èπÔ∏è Stop
          </button>
        </div>
      </div>
    </div>

    <div class="bg-gray-200 dark:bg-gray-800 p-4 rounded-xl shadow">
      <h2 class="font-semibold mb-2">Generated JSON Preview:</h2>
      <pre id="jsonPreview" class="code-box text-sm overflow-x-auto text-green-400"></pre>
    </div>
  </div>

<script>
const locations = ["Ajmer","Alwar","Banswara","Barmer","Bharatpur","Bhilwara","Bikaner","Bundi","Chittorgarh","Churu","Dausa","Dholpur","Dungarpur","Hanumangarh","Jaipur","Jaisalmer","Jalore","Jhalawar","Jhunjhunu","Jodhpur","Karauli","Kota","Nagaur","Pali","Pratapgarh","Rajsamand","Sawai Madhopur","Sikar","Sirohi","Sri Ganganagar","Tonk","Udaipur"];
let lastGeneratedData = [];
let autoUploadInterval = null;
let autoStopTimeout = null;
let countdownInterval = null;
let successfulUploads = 0;

// Pad numbers to 3 digits
function pad(num) {
  return String(num).padStart(3, '0');
}

// Generate a single IoT entry
function generateEntry() {
  const autoDeviceId = document.getElementById("autoDeviceId").checked;
  const autoHumidity = document.getElementById("autoHumidity").checked;
  const autoPressure = document.getElementById("autoPressure").checked;
  const autoTemperature = document.getElementById("autoTemperature").checked;
  const autoLocation = document.getElementById("autoLocation").checked;

  const deviceIdInput = document.getElementById("deviceId");
  const humidityInput = document.getElementById("humidity");
  const pressureInput = document.getElementById("pressure");
  const temperatureInput = document.getElementById("temperature");
  const locationSelect = document.getElementById("location");

  const deviceId = autoDeviceId ? `sensor-${pad(Math.floor(Math.random() * 100 + 1))}` : deviceIdInput.value;
  if (autoDeviceId) deviceIdInput.value = deviceId;

  const humidity = autoHumidity ? Math.floor(Math.random() * 91) + 10 : (Number(humidityInput.value) || 0);
  if (autoHumidity) humidityInput.value = humidity;

  const pressure = autoPressure ? Math.floor(Math.random() * 201) + 900 : (Number(pressureInput.value) || 0);
  if (autoPressure) pressureInput.value = pressure;

  const temperature = autoTemperature ? Math.floor(Math.random() * 45) + 11 : (Number(temperatureInput.value) || 0);
  if (autoTemperature) temperatureInput.value = temperature;

  const location = autoLocation ? locations[Math.floor(Math.random() * locations.length)] : locationSelect.value;
  if (autoLocation) locationSelect.value = location;

  return {
    device_id: deviceId,
    humidity,
    pressure,
    temperature,
    location,
    timestamp: new Date().toISOString().split(".")[0] + 'Z',
  };
}

// Generate JSON entries
function generateJSON() {
  const num = document.getElementById("autoMultiple").checked ? parseInt(document.getElementById("numEntries").value) : 1;
  lastGeneratedData = Array.from({ length: num }, generateEntry);
  document.getElementById("jsonPreview").textContent = JSON.stringify(lastGeneratedData, null, 2);

  // Enable buttons
  document.getElementById("downloadBtn").disabled = false;
  document.getElementById("uploadBtn").disabled = false;
}

// Download JSON file
function downloadJSON() {
  if (!lastGeneratedData.length) return;
  const dataStr = JSON.stringify(lastGeneratedData, null, 2);
  const blob = new Blob([dataStr], { type: "application/json" });
  const url = URL.createObjectURL(blob);
  const deviceId = lastGeneratedData[0].device_id || "device";
  const safeTimestamp = lastGeneratedData[0].timestamp
    .replace(/[:.]/g, "-")
    .replace("T", "_")
    .replace("Z", "");
  const filename = `${deviceId}_${safeTimestamp}.json`;
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  a.click();
  URL.revokeObjectURL(url);
}

const apiEndpoint = "https://1didwbq7ui.execute-api.us-east-1.amazonaws.com/prod/Iot-data_producer";

// Upload to API
async function uploadToAPI() {
  if (!lastGeneratedData.length) {
    alert("‚ö†Ô∏è Please generate JSON first.");
    return;
  }
  try {
    const response = await fetch(apiEndpoint, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(lastGeneratedData.length === 1 ? lastGeneratedData[0] : lastGeneratedData)
    });
    const result = await response.json();
    if (response.ok) {
      console.log("‚úÖ Upload success:", result);
      successfulUploads++; 
      updateRemainingTimeDisplay();
    } else {
      alert("‚ùå Upload failed!");
      console.error(result);
    }
  } catch (err) {
    alert("‚ùå Network error!");
    console.error(err);
  }
}

// Auto upload loop
async function autoUploadLoop() {
  generateJSON();
  await uploadToAPI();
}

// Update display helper
function updateRemainingTimeDisplay(remainingSeconds = null) {
  const remainingTimeDisplay = document.getElementById("remainingTimeDisplay");
  let timePart = remainingSeconds !== null
    ? `‚è≥ Time left: ${Math.floor(remainingSeconds / 60)}m ${remainingSeconds % 60}s`
    : '';
  remainingTimeDisplay.textContent = `${timePart} | üì¶ Successful uploads: ${successfulUploads}`;
}

// DOM ready
document.addEventListener("DOMContentLoaded", () => {
  // Populate location select
  const locationSelect = document.getElementById("location");
  locations.forEach(loc => {
    const option = document.createElement("option");
    option.value = loc;
    option.text = loc;
    locationSelect.appendChild(option);
  });
  generateEntry();

  // Dark mode persistence
  const darkToggle = document.getElementById("darkModeToggle");
  if (localStorage.getItem("darkMode") === "true") {
    document.body.classList.add("dark");
    darkToggle.checked = true;
  }
  darkToggle.addEventListener("change", (e) => {
    document.body.classList.toggle("dark", e.target.checked);
    localStorage.setItem("darkMode", e.target.checked);
  });

  // Button events
  document.getElementById("generateBtn").addEventListener("click", generateJSON);
  document.getElementById("downloadBtn").addEventListener("click", downloadJSON);
  document.getElementById("uploadBtn").addEventListener("click", uploadToAPI);

  const startBtn = document.getElementById("startAutoUploadBtn");
  const stopBtn = document.getElementById("stopAutoUploadBtn");

  startBtn.addEventListener("click", () => {
    const freq = parseInt(document.getElementById("uploadFrequency").value);
    const durationMinutes = parseInt(document.getElementById("duration").value);

    clearInterval(autoUploadInterval);
    clearTimeout(autoStopTimeout);
    clearInterval(countdownInterval);

    successfulUploads = 0; // reset count
    autoUploadLoop();
    autoUploadInterval = setInterval(autoUploadLoop, freq);

    if (durationMinutes > 0) {
      let remainingSeconds = durationMinutes * 60;
      const updateRemainingTime = () => {
        updateRemainingTimeDisplay(remainingSeconds);
        remainingSeconds--;
      };
      updateRemainingTime();
      countdownInterval = setInterval(updateRemainingTime, 1000);

      autoStopTimeout = setTimeout(() => {
  	clearInterval(autoUploadInterval);
	  clearInterval(countdownInterval);
	  autoUploadInterval = null;
	  startBtn.disabled = false;
	  stopBtn.disabled = true;
	  document.getElementById("remainingTimeDisplay").textContent =
	    `‚úÖ Auto-upload stopped. Total successful uploads: ${successfulUploads}`;
	}, durationMinutes * 60 * 1000);
    } else {
      updateRemainingTimeDisplay();
    }

    startBtn.disabled = true;
    stopBtn.disabled = false;
  });

  stopBtn.addEventListener("click", () => {
  clearInterval(autoUploadInterval);
  clearTimeout(autoStopTimeout);
  clearInterval(countdownInterval);
  autoUploadInterval = null;
  autoStopTimeout = null;
  startBtn.disabled = false;
  stopBtn.disabled = true;
  document.getElementById("remainingTimeDisplay").textContent =
    ‚èπÔ∏è Stopped manually. Total successful uploads: ${successfulUploads}`;
});
});
</script>
</body>
</html>
